{"remainingRequest":"/Users/oleksandrmostovyi/GIT/BrainHub/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/oleksandrmostovyi/GIT/BrainHub/src/components/EasyOneTwo.vue?vue&type=style&index=0&id=46ff86d8&scoped=true&lang=css&","dependencies":[{"path":"/Users/oleksandrmostovyi/GIT/BrainHub/src/components/EasyOneTwo.vue","mtime":1644409536430},{"path":"/Users/oleksandrmostovyi/GIT/BrainHub/node_modules/css-loader/dist/cjs.js","mtime":1629542514662},{"path":"/Users/oleksandrmostovyi/GIT/BrainHub/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1629542525791},{"path":"/Users/oleksandrmostovyi/GIT/BrainHub/node_modules/postcss-loader/src/index.js","mtime":1629542515023},{"path":"/Users/oleksandrmostovyi/GIT/BrainHub/node_modules/cache-loader/dist/cjs.js","mtime":1644252659493},{"path":"/Users/oleksandrmostovyi/GIT/BrainHub/node_modules/vue-loader/lib/index.js","mtime":1629542525791}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKYnV0dG9uIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiByZWQ7IC8qIEdyZWVuICovCiAgYm9yZGVyOiBub25lOwogIGNvbG9yOiB3aGl0ZTsKICBwYWRkaW5nOiAxNXB4IDMycHg7CiAgdGV4dC1hbGlnbjogY2VudGVyOwogIHRleHQtZGVjb3JhdGlvbjogbm9uZTsKICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CiAgZm9udC1zaXplOiAxNnB4Owp9Cg=="},{"version":3,"sources":["EasyOneTwo.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"EasyOneTwo.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <div>\n      <button @click=\"getNewNumbersArray( repeats )\">Result is: {{ answer }}</button>\n    </div>\n    <div>\n      <div class=\"numbers-block\" v-for=\"(element, i) in array\" :key=\" 'A'+ i\">{{ element }} </div>\n    </div>\n  </div>\n</template>\n\n<script>\n// For now this function works, but input parameters are hardcoded\nexport default {\n  name: \"EasyOneTwo\",\n  data() {\n    return {\n      array: [],\n      answer: 0\n    }\n  },\n  // Input parameters\n  props: [\"repeats\"],\n  // Digits generation function\n  methods: {\n    getNewNumbersArray: function(repeats) {\n      console.log(\"EasyOneTwo\")\n      let temporalArrayWithNumbers = [];\n      let interimAnswer = 0;\n      let currentValue = 0;\n      for(let i = 0; i < repeats; i++){\n\n        switch (interimAnswer) {\n            // If current step is equals to Zero, we make following\n          case 0: {\n            currentValue = this.getRandomIntInclusive(1, 2);\n            temporalArrayWithNumbers.push(currentValue);\n            interimAnswer += currentValue;\n            break;\n          }\n            // If current step is equals to One, we make following\n          case 1: {\n            let list1 = [1,-1, 2];\n            currentValue = this.getRandomIntInclusive(0, 2);\n            currentValue = list1[currentValue];\n            temporalArrayWithNumbers.push(currentValue);\n            interimAnswer += currentValue;\n            break;\n          }\n            // If current step is equals to Two, we make following\n          case 2: {\n            let list2 = [-2,-1, 1, 2];\n            currentValue = this.getRandomIntInclusive(0, 3);\n            currentValue = list2[currentValue];\n            temporalArrayWithNumbers.push(currentValue);\n            interimAnswer += currentValue;\n            break;\n          }\n            // If current step is equals to Three, we make following\n          case 3: {\n            let list3 = [-2,-1, 1];\n            currentValue = this.getRandomIntInclusive(0, 2);\n            currentValue = list3[currentValue];\n            temporalArrayWithNumbers.push(currentValue);\n            interimAnswer += currentValue;\n            break;\n          }\n            // If current step is equals to Four, we make following\n          case 4: {\n            let list4 = [-2,-1];\n            currentValue = this.getRandomIntInclusive(0, 1);\n            currentValue = list4[currentValue];\n            temporalArrayWithNumbers.push(currentValue);\n            interimAnswer += currentValue;\n            break;\n          }\n        }\n      }\n      this.array = temporalArrayWithNumbers;\n      this.answer = interimAnswer;\n    },\n    // Generates random values\n    getRandomIntInclusive: function(min, max) {\n      return Math.floor(Math.random() * (max - min + 1)) + min; //Максимум и минимум включаются\n    }\n  }\n}\n</script>\n\n<style scoped>\n  button {\n    background-color: red; /* Green */\n    border: none;\n    color: white;\n    padding: 15px 32px;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n  }\n</style>"]}]}