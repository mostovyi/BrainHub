{"remainingRequest":"/Users/oleksandrmostovyi/GIT/BrainHub/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/oleksandrmostovyi/GIT/BrainHub/src/components/EasyOneTwo.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/oleksandrmostovyi/GIT/BrainHub/src/components/EasyOneTwo.vue","mtime":1644409503527},{"path":"/Users/oleksandrmostovyi/GIT/BrainHub/node_modules/cache-loader/dist/cjs.js","mtime":1644252659493},{"path":"/Users/oleksandrmostovyi/GIT/BrainHub/node_modules/babel-loader/lib/index.js","mtime":1644252657160},{"path":"/Users/oleksandrmostovyi/GIT/BrainHub/node_modules/cache-loader/dist/cjs.js","mtime":1644252659493},{"path":"/Users/oleksandrmostovyi/GIT/BrainHub/node_modules/vue-loader/lib/index.js","mtime":1629542525791}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCgovLyBGb3Igbm93IHRoaXMgZnVuY3Rpb24gd29ya3MsIGJ1dCBpbnB1dCBwYXJhbWV0ZXJzIGFyZSBoYXJkY29kZWQKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICJFYXN5T25lVHdvIiwKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgYXJyYXk6IFtdLAogICAgICBhbnN3ZXI6IDAKICAgIH0KICB9LAogIC8vIElucHV0IHBhcmFtZXRlcnMKICBwcm9wczogWyJyZXBlYXRzIl0sCiAgLy8gRGlnaXRzIGdlbmVyYXRpb24gZnVuY3Rpb24KICBtZXRob2RzOiB7CiAgICBnZXROZXdOdW1iZXJzQXJyYXk6IGZ1bmN0aW9uKHJlcGVhdHMpIHsKICAgICAgY29uc29sZS5sb2coIkVhc3lPbmVUd28iKQogICAgICBsZXQgdGVtcG9yYWxBcnJheVdpdGhOdW1iZXJzID0gW107CiAgICAgIGxldCBoZWxwQW5zd2VyID0gMDsKICAgICAgbGV0IGN1cnJlbnRWYWx1ZSA9IDA7CiAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCByZXBlYXRzOyBpKyspewoKICAgICAgICBzd2l0Y2ggKGhlbHBBbnN3ZXIpIHsKICAgICAgICAgICAgLy8gSWYgY3VycmVudCBzdGVwIGlzIGVxdWFscyB0byBaZXJvLCB3ZSBtYWtlIGZvbGxvd2luZwogICAgICAgICAgY2FzZSAwOiB7CiAgICAgICAgICAgIGN1cnJlbnRWYWx1ZSA9IHRoaXMuZ2V0UmFuZG9tSW50SW5jbHVzaXZlKDEsIDIpOwogICAgICAgICAgICB0ZW1wb3JhbEFycmF5V2l0aE51bWJlcnMucHVzaChjdXJyZW50VmFsdWUpOwogICAgICAgICAgICBoZWxwQW5zd2VyICs9IGN1cnJlbnRWYWx1ZTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgICAgIC8vIElmIGN1cnJlbnQgc3RlcCBpcyBlcXVhbHMgdG8gT25lLCB3ZSBtYWtlIGZvbGxvd2luZwogICAgICAgICAgY2FzZSAxOiB7CiAgICAgICAgICAgIGxldCBsaXN0MSA9IFsxLC0xLCAyXTsKICAgICAgICAgICAgY3VycmVudFZhbHVlID0gdGhpcy5nZXRSYW5kb21JbnRJbmNsdXNpdmUoMCwgMik7CiAgICAgICAgICAgIGN1cnJlbnRWYWx1ZSA9IGxpc3QxW2N1cnJlbnRWYWx1ZV07CiAgICAgICAgICAgIHRlbXBvcmFsQXJyYXlXaXRoTnVtYmVycy5wdXNoKGN1cnJlbnRWYWx1ZSk7CiAgICAgICAgICAgIGhlbHBBbnN3ZXIgKz0gY3VycmVudFZhbHVlOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICAgICAgLy8gSWYgY3VycmVudCBzdGVwIGlzIGVxdWFscyB0byBUd28sIHdlIG1ha2UgZm9sbG93aW5nCiAgICAgICAgICBjYXNlIDI6IHsKICAgICAgICAgICAgbGV0IGxpc3QyID0gWy0yLC0xLCAxLCAyXTsKICAgICAgICAgICAgY3VycmVudFZhbHVlID0gdGhpcy5nZXRSYW5kb21JbnRJbmNsdXNpdmUoMCwgMyk7CiAgICAgICAgICAgIGN1cnJlbnRWYWx1ZSA9IGxpc3QyW2N1cnJlbnRWYWx1ZV07CiAgICAgICAgICAgIHRlbXBvcmFsQXJyYXlXaXRoTnVtYmVycy5wdXNoKGN1cnJlbnRWYWx1ZSk7CiAgICAgICAgICAgIGhlbHBBbnN3ZXIgKz0gY3VycmVudFZhbHVlOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICAgICAgLy8gSWYgY3VycmVudCBzdGVwIGlzIGVxdWFscyB0byBUaHJlZSwgd2UgbWFrZSBmb2xsb3dpbmcKICAgICAgICAgIGNhc2UgMzogewogICAgICAgICAgICBsZXQgbGlzdDMgPSBbLTIsLTEsIDFdOwogICAgICAgICAgICBjdXJyZW50VmFsdWUgPSB0aGlzLmdldFJhbmRvbUludEluY2x1c2l2ZSgwLCAyKTsKICAgICAgICAgICAgY3VycmVudFZhbHVlID0gbGlzdDNbY3VycmVudFZhbHVlXTsKICAgICAgICAgICAgdGVtcG9yYWxBcnJheVdpdGhOdW1iZXJzLnB1c2goY3VycmVudFZhbHVlKTsKICAgICAgICAgICAgaGVscEFuc3dlciArPSBjdXJyZW50VmFsdWU7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgICAgICAvLyBJZiBjdXJyZW50IHN0ZXAgaXMgZXF1YWxzIHRvIEZvdXIsIHdlIG1ha2UgZm9sbG93aW5nCiAgICAgICAgICBjYXNlIDQ6IHsKICAgICAgICAgICAgbGV0IGxpc3Q0ID0gWy0yLC0xXTsKICAgICAgICAgICAgY3VycmVudFZhbHVlID0gdGhpcy5nZXRSYW5kb21JbnRJbmNsdXNpdmUoMCwgMSk7CiAgICAgICAgICAgIGN1cnJlbnRWYWx1ZSA9IGxpc3Q0W2N1cnJlbnRWYWx1ZV07CiAgICAgICAgICAgIHRlbXBvcmFsQXJyYXlXaXRoTnVtYmVycy5wdXNoKGN1cnJlbnRWYWx1ZSk7CiAgICAgICAgICAgIGhlbHBBbnN3ZXIgKz0gY3VycmVudFZhbHVlOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgICAgdGhpcy5hcnJheSA9IHRlbXBvcmFsQXJyYXlXaXRoTnVtYmVyczsKICAgICAgdGhpcy5hbnN3ZXIgPSBoZWxwQW5zd2VyOwogICAgfSwKICAgIC8vIEdlbmVyYXRlcyByYW5kb20gdmFsdWVzCiAgICBnZXRSYW5kb21JbnRJbmNsdXNpdmU6IGZ1bmN0aW9uKG1pbiwgbWF4KSB7CiAgICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkpICsgbWluOyAvL9Cc0LDQutGB0LjQvNGD0Lwg0Lgg0LzQuNC90LjQvNGD0Lwg0LLQutC70Y7Rh9Cw0Y7RgtGB0Y8KICAgIH0KICB9Cn0K"},{"version":3,"sources":["EasyOneTwo.vue"],"names":[],"mappings":";;;;;;;;;;;;;;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"EasyOneTwo.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <div>\n      <button @click=\"getNewNumbersArray( repeats )\">Result is: {{ answer }}</button>\n    </div>\n    <div>\n      <div class=\"numbers-block\" v-for=\"(element, i) in array\" :key=\" 'A'+ i\">{{ element }} </div>\n    </div>\n  </div>\n</template>\n\n\n<script>\n\n// For now this function works, but input parameters are hardcoded\nexport default {\n  name: \"EasyOneTwo\",\n  data() {\n    return {\n      array: [],\n      answer: 0\n    }\n  },\n  // Input parameters\n  props: [\"repeats\"],\n  // Digits generation function\n  methods: {\n    getNewNumbersArray: function(repeats) {\n      console.log(\"EasyOneTwo\")\n      let temporalArrayWithNumbers = [];\n      let helpAnswer = 0;\n      let currentValue = 0;\n      for(let i = 0; i < repeats; i++){\n\n        switch (helpAnswer) {\n            // If current step is equals to Zero, we make following\n          case 0: {\n            currentValue = this.getRandomIntInclusive(1, 2);\n            temporalArrayWithNumbers.push(currentValue);\n            helpAnswer += currentValue;\n            break;\n          }\n            // If current step is equals to One, we make following\n          case 1: {\n            let list1 = [1,-1, 2];\n            currentValue = this.getRandomIntInclusive(0, 2);\n            currentValue = list1[currentValue];\n            temporalArrayWithNumbers.push(currentValue);\n            helpAnswer += currentValue;\n            break;\n          }\n            // If current step is equals to Two, we make following\n          case 2: {\n            let list2 = [-2,-1, 1, 2];\n            currentValue = this.getRandomIntInclusive(0, 3);\n            currentValue = list2[currentValue];\n            temporalArrayWithNumbers.push(currentValue);\n            helpAnswer += currentValue;\n            break;\n          }\n            // If current step is equals to Three, we make following\n          case 3: {\n            let list3 = [-2,-1, 1];\n            currentValue = this.getRandomIntInclusive(0, 2);\n            currentValue = list3[currentValue];\n            temporalArrayWithNumbers.push(currentValue);\n            helpAnswer += currentValue;\n            break;\n          }\n            // If current step is equals to Four, we make following\n          case 4: {\n            let list4 = [-2,-1];\n            currentValue = this.getRandomIntInclusive(0, 1);\n            currentValue = list4[currentValue];\n            temporalArrayWithNumbers.push(currentValue);\n            helpAnswer += currentValue;\n            break;\n          }\n        }\n      }\n      this.array = temporalArrayWithNumbers;\n      this.answer = helpAnswer;\n    },\n    // Generates random values\n    getRandomIntInclusive: function(min, max) {\n      return Math.floor(Math.random() * (max - min + 1)) + min; //Максимум и минимум включаются\n    }\n  }\n}\n</script>\n\n<style scoped>\n  button {\n    background-color: red; /* Green */\n    border: none;\n    color: white;\n    padding: 15px 32px;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n  }\n</style>"]}]}