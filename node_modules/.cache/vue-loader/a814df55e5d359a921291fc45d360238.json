{"remainingRequest":"/Users/oleksandrmostovyi/GIT/BrainHub/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/oleksandrmostovyi/GIT/BrainHub/src/components/EasyOneTwo.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/oleksandrmostovyi/GIT/BrainHub/src/components/EasyOneTwo.vue","mtime":1644409536430},{"path":"/Users/oleksandrmostovyi/GIT/BrainHub/node_modules/cache-loader/dist/cjs.js","mtime":1644252659493},{"path":"/Users/oleksandrmostovyi/GIT/BrainHub/node_modules/babel-loader/lib/index.js","mtime":1644252657160},{"path":"/Users/oleksandrmostovyi/GIT/BrainHub/node_modules/cache-loader/dist/cjs.js","mtime":1644252659493},{"path":"/Users/oleksandrmostovyi/GIT/BrainHub/node_modules/vue-loader/lib/index.js","mtime":1629542525791}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCi8vIEZvciBub3cgdGhpcyBmdW5jdGlvbiB3b3JrcywgYnV0IGlucHV0IHBhcmFtZXRlcnMgYXJlIGhhcmRjb2RlZApleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogIkVhc3lPbmVUd28iLAogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBhcnJheTogW10sCiAgICAgIGFuc3dlcjogMAogICAgfQogIH0sCiAgLy8gSW5wdXQgcGFyYW1ldGVycwogIHByb3BzOiBbInJlcGVhdHMiXSwKICAvLyBEaWdpdHMgZ2VuZXJhdGlvbiBmdW5jdGlvbgogIG1ldGhvZHM6IHsKICAgIGdldE5ld051bWJlcnNBcnJheTogZnVuY3Rpb24ocmVwZWF0cykgewogICAgICBjb25zb2xlLmxvZygiRWFzeU9uZVR3byIpCiAgICAgIGxldCB0ZW1wb3JhbEFycmF5V2l0aE51bWJlcnMgPSBbXTsKICAgICAgbGV0IGludGVyaW1BbnN3ZXIgPSAwOwogICAgICBsZXQgY3VycmVudFZhbHVlID0gMDsKICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHJlcGVhdHM7IGkrKyl7CgogICAgICAgIHN3aXRjaCAoaW50ZXJpbUFuc3dlcikgewogICAgICAgICAgICAvLyBJZiBjdXJyZW50IHN0ZXAgaXMgZXF1YWxzIHRvIFplcm8sIHdlIG1ha2UgZm9sbG93aW5nCiAgICAgICAgICBjYXNlIDA6IHsKICAgICAgICAgICAgY3VycmVudFZhbHVlID0gdGhpcy5nZXRSYW5kb21JbnRJbmNsdXNpdmUoMSwgMik7CiAgICAgICAgICAgIHRlbXBvcmFsQXJyYXlXaXRoTnVtYmVycy5wdXNoKGN1cnJlbnRWYWx1ZSk7CiAgICAgICAgICAgIGludGVyaW1BbnN3ZXIgKz0gY3VycmVudFZhbHVlOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICAgICAgLy8gSWYgY3VycmVudCBzdGVwIGlzIGVxdWFscyB0byBPbmUsIHdlIG1ha2UgZm9sbG93aW5nCiAgICAgICAgICBjYXNlIDE6IHsKICAgICAgICAgICAgbGV0IGxpc3QxID0gWzEsLTEsIDJdOwogICAgICAgICAgICBjdXJyZW50VmFsdWUgPSB0aGlzLmdldFJhbmRvbUludEluY2x1c2l2ZSgwLCAyKTsKICAgICAgICAgICAgY3VycmVudFZhbHVlID0gbGlzdDFbY3VycmVudFZhbHVlXTsKICAgICAgICAgICAgdGVtcG9yYWxBcnJheVdpdGhOdW1iZXJzLnB1c2goY3VycmVudFZhbHVlKTsKICAgICAgICAgICAgaW50ZXJpbUFuc3dlciArPSBjdXJyZW50VmFsdWU7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgICAgICAvLyBJZiBjdXJyZW50IHN0ZXAgaXMgZXF1YWxzIHRvIFR3bywgd2UgbWFrZSBmb2xsb3dpbmcKICAgICAgICAgIGNhc2UgMjogewogICAgICAgICAgICBsZXQgbGlzdDIgPSBbLTIsLTEsIDEsIDJdOwogICAgICAgICAgICBjdXJyZW50VmFsdWUgPSB0aGlzLmdldFJhbmRvbUludEluY2x1c2l2ZSgwLCAzKTsKICAgICAgICAgICAgY3VycmVudFZhbHVlID0gbGlzdDJbY3VycmVudFZhbHVlXTsKICAgICAgICAgICAgdGVtcG9yYWxBcnJheVdpdGhOdW1iZXJzLnB1c2goY3VycmVudFZhbHVlKTsKICAgICAgICAgICAgaW50ZXJpbUFuc3dlciArPSBjdXJyZW50VmFsdWU7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgICAgICAvLyBJZiBjdXJyZW50IHN0ZXAgaXMgZXF1YWxzIHRvIFRocmVlLCB3ZSBtYWtlIGZvbGxvd2luZwogICAgICAgICAgY2FzZSAzOiB7CiAgICAgICAgICAgIGxldCBsaXN0MyA9IFstMiwtMSwgMV07CiAgICAgICAgICAgIGN1cnJlbnRWYWx1ZSA9IHRoaXMuZ2V0UmFuZG9tSW50SW5jbHVzaXZlKDAsIDIpOwogICAgICAgICAgICBjdXJyZW50VmFsdWUgPSBsaXN0M1tjdXJyZW50VmFsdWVdOwogICAgICAgICAgICB0ZW1wb3JhbEFycmF5V2l0aE51bWJlcnMucHVzaChjdXJyZW50VmFsdWUpOwogICAgICAgICAgICBpbnRlcmltQW5zd2VyICs9IGN1cnJlbnRWYWx1ZTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgICAgIC8vIElmIGN1cnJlbnQgc3RlcCBpcyBlcXVhbHMgdG8gRm91ciwgd2UgbWFrZSBmb2xsb3dpbmcKICAgICAgICAgIGNhc2UgNDogewogICAgICAgICAgICBsZXQgbGlzdDQgPSBbLTIsLTFdOwogICAgICAgICAgICBjdXJyZW50VmFsdWUgPSB0aGlzLmdldFJhbmRvbUludEluY2x1c2l2ZSgwLCAxKTsKICAgICAgICAgICAgY3VycmVudFZhbHVlID0gbGlzdDRbY3VycmVudFZhbHVlXTsKICAgICAgICAgICAgdGVtcG9yYWxBcnJheVdpdGhOdW1iZXJzLnB1c2goY3VycmVudFZhbHVlKTsKICAgICAgICAgICAgaW50ZXJpbUFuc3dlciArPSBjdXJyZW50VmFsdWU7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICB0aGlzLmFycmF5ID0gdGVtcG9yYWxBcnJheVdpdGhOdW1iZXJzOwogICAgICB0aGlzLmFuc3dlciA9IGludGVyaW1BbnN3ZXI7CiAgICB9LAogICAgLy8gR2VuZXJhdGVzIHJhbmRvbSB2YWx1ZXMKICAgIGdldFJhbmRvbUludEluY2x1c2l2ZTogZnVuY3Rpb24obWluLCBtYXgpIHsKICAgICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSkgKyBtaW47IC8v0JzQsNC60YHQuNC80YPQvCDQuCDQvNC40L3QuNC80YPQvCDQstC60LvRjtGH0LDRjtGC0YHRjwogICAgfQogIH0KfQo="},{"version":3,"sources":["EasyOneTwo.vue"],"names":[],"mappings":";;;;;;;;;;;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"EasyOneTwo.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <div>\n      <button @click=\"getNewNumbersArray( repeats )\">Result is: {{ answer }}</button>\n    </div>\n    <div>\n      <div class=\"numbers-block\" v-for=\"(element, i) in array\" :key=\" 'A'+ i\">{{ element }} </div>\n    </div>\n  </div>\n</template>\n\n<script>\n// For now this function works, but input parameters are hardcoded\nexport default {\n  name: \"EasyOneTwo\",\n  data() {\n    return {\n      array: [],\n      answer: 0\n    }\n  },\n  // Input parameters\n  props: [\"repeats\"],\n  // Digits generation function\n  methods: {\n    getNewNumbersArray: function(repeats) {\n      console.log(\"EasyOneTwo\")\n      let temporalArrayWithNumbers = [];\n      let interimAnswer = 0;\n      let currentValue = 0;\n      for(let i = 0; i < repeats; i++){\n\n        switch (interimAnswer) {\n            // If current step is equals to Zero, we make following\n          case 0: {\n            currentValue = this.getRandomIntInclusive(1, 2);\n            temporalArrayWithNumbers.push(currentValue);\n            interimAnswer += currentValue;\n            break;\n          }\n            // If current step is equals to One, we make following\n          case 1: {\n            let list1 = [1,-1, 2];\n            currentValue = this.getRandomIntInclusive(0, 2);\n            currentValue = list1[currentValue];\n            temporalArrayWithNumbers.push(currentValue);\n            interimAnswer += currentValue;\n            break;\n          }\n            // If current step is equals to Two, we make following\n          case 2: {\n            let list2 = [-2,-1, 1, 2];\n            currentValue = this.getRandomIntInclusive(0, 3);\n            currentValue = list2[currentValue];\n            temporalArrayWithNumbers.push(currentValue);\n            interimAnswer += currentValue;\n            break;\n          }\n            // If current step is equals to Three, we make following\n          case 3: {\n            let list3 = [-2,-1, 1];\n            currentValue = this.getRandomIntInclusive(0, 2);\n            currentValue = list3[currentValue];\n            temporalArrayWithNumbers.push(currentValue);\n            interimAnswer += currentValue;\n            break;\n          }\n            // If current step is equals to Four, we make following\n          case 4: {\n            let list4 = [-2,-1];\n            currentValue = this.getRandomIntInclusive(0, 1);\n            currentValue = list4[currentValue];\n            temporalArrayWithNumbers.push(currentValue);\n            interimAnswer += currentValue;\n            break;\n          }\n        }\n      }\n      this.array = temporalArrayWithNumbers;\n      this.answer = interimAnswer;\n    },\n    // Generates random values\n    getRandomIntInclusive: function(min, max) {\n      return Math.floor(Math.random() * (max - min + 1)) + min; //Максимум и минимум включаются\n    }\n  }\n}\n</script>\n\n<style scoped>\n  button {\n    background-color: red; /* Green */\n    border: none;\n    color: white;\n    padding: 15px 32px;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n  }\n</style>"]}]}